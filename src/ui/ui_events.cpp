// This file was generated by SquareLine Studio
// SquareLine Studio version: SquareLine Studio 1.5.3
// LVGL version: 8.3.11
// Project name: SquareLine_Project

#include "ui.h"
#include "../ui_shortage/ui_shortage.h"
#include "../wifi/wifi_handler.h"
#include "../lvgl/lvgl_ui.h"
#include "../rtc/rtc_handler.h"
// #include <Arduino.h>
// #include <WiFi.h>
// #include "../RTC/rtc_clock.h"
lv_calendar_date_t data;

lv_obj_t *btn;

void go_to_main_screen(lv_event_t *e)
{
	lv_obj_set_style_bg_color(ui_mainScreenButton, lv_color_hex(0x2666DE), 0);
	lv_obj_set_style_bg_color(ui_programSettingButton, lv_color_hex(0x606162), 0);
	lv_obj_set_style_bg_color(ui_aboutButton, lv_color_hex(0x606162), 0);
	lv_obj_set_style_bg_color(ui_settingButton, lv_color_hex(0x606162), 0);
	lv_obj_clear_flag(ui_mainContentContainer, LV_OBJ_FLAG_HIDDEN);
	lv_obj_add_flag(ui_programContentContainer, LV_OBJ_FLAG_HIDDEN);
	lv_obj_add_flag(ui_settingContentContainer, LV_OBJ_FLAG_HIDDEN);
}
void go_to_setting_screen(lv_event_t *e)
{
	lv_obj_set_style_bg_color(ui_mainScreenButton, lv_color_hex(0x606162), 0);
	lv_obj_set_style_bg_color(ui_programSettingButton, lv_color_hex(0x606162), 0);
	lv_obj_set_style_bg_color(ui_aboutButton, lv_color_hex(0x606162), 0);
	lv_obj_set_style_bg_color(ui_settingButton, lv_color_hex(0x2666DE), 0);
	lv_obj_add_flag(ui_mainContentContainer, LV_OBJ_FLAG_HIDDEN);
	lv_obj_add_flag(ui_programContentContainer, LV_OBJ_FLAG_HIDDEN);
	lv_obj_clear_flag(ui_settingContentContainer, LV_OBJ_FLAG_HIDDEN);
}
void go_to_program_screen(lv_event_t *e)
{
	lv_obj_set_style_bg_color(ui_mainScreenButton, lv_color_hex(0x606162), 0);
	lv_obj_set_style_bg_color(ui_programSettingButton, lv_color_hex(0x2666DE), 0);
	lv_obj_set_style_bg_color(ui_aboutButton, lv_color_hex(0x606162), 0);
	lv_obj_set_style_bg_color(ui_settingButton, lv_color_hex(0x606162), 0);
	lv_obj_clear_flag(ui_programContentContainer, LV_OBJ_FLAG_HIDDEN);
	lv_obj_add_flag(ui_mainContentContainer, LV_OBJ_FLAG_HIDDEN);
	lv_obj_add_flag(ui_settingContentContainer, LV_OBJ_FLAG_HIDDEN);
}
void get_the_selected_calender(lv_event_t *e)
{
	char date[11];
	lv_obj_t *obj = lv_event_get_current_target(e);
	lv_calendar_get_pressed_date(obj, &data);
	lv_calendar_set_today_date(obj, data.year, data.month, data.day);
	sprintf(date, "%04d-%02d-%02d", data.year, data.month, data.day);
	lv_label_set_text(ui_Label18, date);
}
void save_clock_setting(lv_event_t *e)
{
	uint8_t hour, minute;
	hour = lv_roller_get_selected(ui_rollerHourSetting);
	minute = lv_roller_get_selected(ui_rollerMinuteSetting);

	if (data.day && data.year && data.month)
	{
		rtc_adjust(data.year, data.month, data.day, hour, minute, 0);
		lv_obj_t *mbox1 = lv_msgbox_create(NULL, "التوقيت", "تم ضبط الساعة بنجاح", NULL, true);
		lv_obj_set_style_text_font(mbox1, &ui_font_NotoSans14, LV_PART_MAIN | LV_STATE_DEFAULT);
		lv_obj_center(mbox1);
	}
	else
	{
		lv_obj_t *mbox1 = lv_msgbox_create(NULL, "التوقيت", "فشل ضبط الوقت ,الرجاء اختيار التاريخ", NULL, true);
		lv_obj_set_style_text_font(mbox1, &ui_font_NotoSans14, LV_PART_MAIN | LV_STATE_DEFAULT);
		lv_obj_center(mbox1);
	}

	// lv_obj_t *mbox1 = lv_msgbox_create(NULL, "التوقيت", "تم ضبط الساعة بنجاح", NULL, true);
	// lv_obj_set_style_text_font(mbox1, &ui_font_kufi14, LV_PART_MAIN | LV_STATE_DEFAULT);
}
void handle_wifi_selected(lv_event_t *e)
{

	lv_obj_t *btn = lv_event_get_current_target(e);
	const char *txt = lv_list_get_btn_text(ui_list, btn); // <-- Critical!
	lv_obj_clear_flag(ui_PanelSSIDPassword, LV_OBJ_FLAG_HIDDEN);
	lv_obj_add_flag(ui_list, LV_OBJ_FLAG_HIDDEN);
	lv_label_set_text(ui_LabelSSID, txt);
}
void search_wifi(lv_event_t *e)
{
	lv_label_set_text(ui_Label30, "جاري البحث عن شبكات");
	xTaskCreate([](void *pv)
				{ scan_wifi_networks();   vTaskDelete(NULL); }, "Task search", 4096, NULL, 2, NULL);
	lv_obj_add_state(ui_Button6, LV_STATE_DISABLED);
	// vTaskResume(task_wifi_search);
	// Your code here
}
void connect_to_wifi(lv_event_t *e)
{

	const char *ssid = lv_label_get_text(ui_LabelSSID);
	const char *password = lv_textarea_get_text(ui_TextAreaSSIPassword);

	strcpy(eep_wifi_setting.ssid, ssid);
	strcpy(eep_wifi_setting.password, password);
	lv_textarea_set_text(ui_TextAreaSSIPassword, "");
	lv_obj_clear_flag(ui_list, LV_OBJ_FLAG_HIDDEN);
	lv_obj_add_flag(ui_PanelSSIDPassword, LV_OBJ_FLAG_HIDDEN);
	WiFi.disconnect();
	WiFi.begin(eep_wifi_setting.ssid, eep_wifi_setting.password);
	EEPROM.put(START_WIFI_CER_ADDRESS, eep_wifi_setting);
	EEPROM.commit();

	// vTaskResume(task_wifi_connect);
}

void canele_connection(lv_event_t *e)
{
	lv_obj_clear_flag(ui_list, LV_OBJ_FLAG_HIDDEN);

	lv_textarea_set_text(ui_TextAreaSSIPassword, "");

	// Your code here
}

void saveRelayName(lv_event_t *e)
{
	uint16_t relayIndex = lv_dropdown_get_selected(ui_DropdownRelayNumber);
	const char *relayName = lv_textarea_get_text(ui_TextAreaRelayName);
	lv_obj_t *lables[] = {ui_LabelRelayNameSetting1, ui_LabelRelayNameSetting2, ui_LabelRelayNameSetting3, ui_LabelRelayNameSetting4, ui_LabelRelayNameSetting5, ui_LabelRelayNameSetting6, ui_LabelRelayNameSetting7, ui_LabelRelayNameSetting8};
	if (strlen(relayName) > 0)
	{
		strcpy(eep_relay_setting[relayIndex].name, relayName);

		Serial.println(relayIndex);
		lv_label_set_text(lables[relayIndex], eep_relay_setting[relayIndex].name);
		EEPROM.put(START_RELAY_SETTING_ADDRESS, eep_relay_setting);
		EEPROM.commit();
	}
}

void relay_1_control_hanlde(lv_event_t *e)
{
	bool relay_switch_setting = lv_obj_has_state(ui_SwitchAutoRelay1, LV_STATE_CHECKED);
	eep_relay_setting[0].controlState = relay_switch_setting;
	if (relay_switch_setting)
	{
		lv_label_set_text(ui_LabelControlState1, "يدوي");
	}
	else
	{
		lv_label_set_text(ui_LabelControlState1, "تلقائي");
	}
	EEPROM.put(START_RELAY_SETTING_ADDRESS, eep_relay_setting);
	EEPROM.commit();
}
void relay_2_control_hanlde(lv_event_t *e)
{
	bool relay_switch_setting = lv_obj_has_state(ui_SwitchAutoRelay2, LV_STATE_CHECKED);
	eep_relay_setting[1].controlState = relay_switch_setting;
	if (relay_switch_setting)
	{
		lv_label_set_text(ui_LabelControlState2, "يدوي");
	}
	else
	{
		lv_label_set_text(ui_LabelControlState2, "تلقائي");
	}
	EEPROM.put(START_RELAY_SETTING_ADDRESS, eep_relay_setting);
	EEPROM.commit();
}
void relay_3_control_hanlde(lv_event_t *e)
{
	bool relay_switch_setting = lv_obj_has_state(ui_SwitchAutoRelay3, LV_STATE_CHECKED);
	eep_relay_setting[2].controlState = relay_switch_setting;
	if (relay_switch_setting)
	{
		lv_label_set_text(ui_LabelControlState3, "يدوي");
	}
	else
	{
		lv_label_set_text(ui_LabelControlState3, "تلقائي");
	}
	EEPROM.put(START_RELAY_SETTING_ADDRESS, eep_relay_setting);
	EEPROM.commit();
}
void relay_4_control_hanlde(lv_event_t *e)
{
	bool relay_switch_setting = lv_obj_has_state(ui_SwitchAutoRelay4, LV_STATE_CHECKED);
	eep_relay_setting[3].controlState = relay_switch_setting;
	if (relay_switch_setting)
	{
		lv_label_set_text(ui_LabelControlState4, "يدوي");
	}
	else
	{
		lv_label_set_text(ui_LabelControlState4, "تلقائي");
	}

	EEPROM.put(START_RELAY_SETTING_ADDRESS, eep_relay_setting);
	EEPROM.commit();
}
void relay_5_control_hanlde(lv_event_t *e)
{
	bool relay_switch_setting = lv_obj_has_state(ui_SwitchAutoRelay5, LV_STATE_CHECKED);
	eep_relay_setting[4].controlState = relay_switch_setting;
	EEPROM.put(START_RELAY_SETTING_ADDRESS, eep_relay_setting);
	if (relay_switch_setting)
	{
		lv_label_set_text(ui_LabelControlState5, "يدوي");
	}
	else
	{
		lv_label_set_text(ui_LabelControlState5, "تلقائي");
	}
}
void relay_6_control_hanlde(lv_event_t *e)
{
	bool relay_switch_setting = lv_obj_has_state(ui_SwitchAutoRelay6, LV_STATE_CHECKED);
	eep_relay_setting[5].controlState = relay_switch_setting;
	if (relay_switch_setting)
	{
		lv_label_set_text(ui_LabelControlState6, "يدوي");
	}
	else
	{
		lv_label_set_text(ui_LabelControlState6, "تلقائي");
	}
	EEPROM.put(START_RELAY_SETTING_ADDRESS, eep_relay_setting);
	EEPROM.commit();
}
void relay_7_control_hanlde(lv_event_t *e)
{
	bool relay_switch_setting = lv_obj_has_state(ui_SwitchAutoRelay7, LV_STATE_CHECKED);
	eep_relay_setting[6].controlState = relay_switch_setting;
	if (relay_switch_setting)
	{
		lv_label_set_text(ui_LabelControlState7, "يدوي");
	}
	else
	{
		lv_label_set_text(ui_LabelControlState7, "تلقائي");
	}
	EEPROM.put(START_RELAY_SETTING_ADDRESS, eep_relay_setting);
	EEPROM.commit();
}
void relay_8_control_hanlde(lv_event_t *e)
{
	bool relay_switch_setting = lv_obj_has_state(ui_SwitchAutoRelay8, LV_STATE_CHECKED);
	eep_relay_setting[7].controlState = relay_switch_setting;
	if (relay_switch_setting)
	{
		lv_label_set_text(ui_LabelControlState8, "يدوي");
	}
	else
	{
		lv_label_set_text(ui_LabelControlState8, "تلقائي");
	}
	EEPROM.put(START_RELAY_SETTING_ADDRESS, eep_relay_setting);
	EEPROM.commit();
}

void change_keyboard_function(lv_event_t *e)
{
	lv_obj_t *obj = lv_event_get_target(e);
	const char *txt = lv_keyboard_get_btn_text(ui_KeyboardRelayName, lv_btnmatrix_get_selected_btn(obj));
	Serial.println(String(txt));
	if (strcmp(txt, LV_SYMBOL_KEYBOARD) == 0)
	{
		Serial.println("convert to English");
		lv_keyboard_set_mode(ui_KeyboardRelayName, LV_KEYBOARD_MODE_TEXT_LOWER);
		lv_obj_set_style_text_font(ui_KeyboardRelayName, &ui_font_NotoSans14, LV_PART_ITEMS | LV_STATE_DEFAULT);
		lv_btnmatrix_set_map(ui_KeyboardRelayName, default_kb_map_arabic);
	}
	else if (strcmp(txt, "تغيير اللغة") == 0)
	{
		Serial.println("convert to Arabic ");
		lv_keyboard_set_mode(ui_KeyboardRelayName, LV_KEYBOARD_MODE_SPECIAL);
		lv_obj_set_style_text_font(ui_KeyboardRelayName, &lv_font_montserrat_14, LV_PART_ITEMS | LV_STATE_DEFAULT);
		lv_btnmatrix_set_map(ui_KeyboardRelayName, default_kb_map_lc_custom);
	}
}